#!/usr/bin/env bash
#
# zenoss        This shell script takes care of starting and stopping zenmon.
#
# chkconfig: 2345 80 30
# description: Zenoss is a monitoring program written by Zenoss, Inc.
#
##############################################################################
#
# Copyright (C) Zenoss, Inc. 2007, all rights reserved.
#
# This content is made available according to terms specified in
# License.zenoss under the directory where your Zenoss product is installed.
#
#Custom Ubuntu Variables
export ZENHOME=/usr/local/zenoss
export RRDCACHED=/usr/local/zenoss/bin/rrdcached
export PATH="/usr/local/zenoss/bin:$PATH"
### BEGIN INIT INFO
# Provides: zenoss
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Should-Start: $all
# Should-Stop: $all
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start/stop Zenoss
# Description: Start/stop Zenoss
### END INIT INFO
#
##############################################################################

set_deamon_list() {
    WEBSERVERCTL=$(${ZENHOME}/bin/zenglobalconf -p webserverctl)
    if [ -z "${WEBSERVERCTL}" ]; then
        WEBSERVERCTL=zopectl
    fi
    # Set path for EL5 redis-server instances
    PATH="$PATH:/usr/sbin"
    CATSERVICE=${ZENHOME}/bin/zencatalogservice
    # reset the list
    C=
    if [ ! -f $ZENHOME/etc/DAEMONS_TXT_ONLY ] ; then
        if [ -f $CATSERVICE ] ; then
            C="$C zencatalogservice"
        fi
        C="$C zeneventserver"
        C="$C ${WEBSERVERCTL}"
        C="$C zenrrdcached"
        C="$C zenhub"
        C="$C zenjobs"
        C="$C zeneventd"
        C="$C zenping"
        C="$C zensyslog"
        C="$C zenstatus"
        C="$C zenactiond"
        C="$C zentrap"
        C="$C zenmodeler"
    #C="$C zenrender"
        C="$C zenperfsnmp"
        C="$C zencommand"
        C="$C zenprocess"
    #C="$C zenmail"
        if which redis-server 2>/dev/null 1>&2 ; then
            C="$C zredis"
        fi

        ZPD=`$ZENHOME/bin/zenpackdaemons --list`
        C="$C $ZPD"
    fi
    if [ -f "$ZENHOME/etc/daemons.txt" ]
    then
        D=`grep -v "^#" $ZENHOME/etc/daemons.txt`
    # add to daemon list without new lines
        for DD in $D
        do
            C="$C $DD"
        done
    fi

    # are we interested in only running daemons?
    if [ $ONLY_RUNNING = "1" ]; then
        C=`zenoss status | grep "pid=" | awk '{ print $2 }'`
    fi

    #filter the daemons
    DLIST=""
    for DAEMON in ${C}
    do
        if echo $DAEMON | grep -E "$DAEMON_FILTER" 1>/dev/null; then
            DLIST="$DLIST $DAEMON"
        fi
    done

    # ZENDAEMONS is what is used when issueing the start/stop
    C="$DLIST"
    echo $C
}


issue() {
    # To properly conform to LSB standards and be used under Linux-HA or RHCS
    # we need to exit with a proper non-zero code when there is a problem with
    # the service. We'll take the naive approach of responding with the highest
    # and most likely worse condition of any of the configured daemons.
    HIGHESTCODE=0
    for cmd in $ZENDAEMONS
    do
        echo -n "Daemon: $cmd "

        # Special status handling for zeoctl and zopectl because the stock
        # scripts exit with a code of 0 no matter what state they're in.
        if [ $FUNC == "status" -a \( $cmd == "zeoctl" -o $cmd == "zopectl" \) ]
        then
            PIDFILE="${ZENHOME}/var/Z2.pid"
            [ $cmd == 'zeoctl' ] && PIDFILE="${ZENHOME}/var/ZEO.pid"

            if running; then
                echo program running\; pid=$PID
                CODE=0
            else
                echo not running
                if [ -f $PIDFILE ]; then
                    rm -f $PIDFILE
                    CODE=1
                else
                    CODE=3
                fi
            fi
        else
            $ZENHOME/bin/$cmd "$FUNC"
            CODE=$?
        fi
        if [ $CODE -gt $HIGHESTCODE ]; then
            HIGHESTCODE=$CODE
        fi

        # During 'zenoss start' if $ZENHOME/var/zenpack_actions.txt exists,
        # execute the actions in the file after zeneventserver has started.
        # After the actions are complete, a zenoss restart is performed.
        PACKFILE="$ZENHOME/var/zenpack_actions.txt"
        if [ $FUNC == "start" -a $cmd == "zeneventserver" -a -f "${PACKFILE}" ]
        then
            local PACKCTBEFORE=$(wc -l $PACKFILE | awk '{print $1}')
            $ZENHOME/bin/zenpack_batch
            returncode=$?
            local PACKCTAFTER=$(wc -l $PACKFILE | awk '{print $1}')

            if [ ${returncode} -ne 0 ]
            then
                echo "Error: A zenpack failed to install. Fix the zenpack or delete it from $ZENHOME/var/zenpack_actions.txt, then restart zenoss." >&2
                exit ${returncode}
            fi

            # if the 'zenpacks to install' list has decreased in size, restart daemons
            if [ $PACKCTBEFORE -gt $PACKCTAFTER ]
            then
                # installing zenpacks changes the list of daemons we need to load,
                # reset that list.
                echo "Zenpacks were installed. Restarting zenoss." >&2
                ZENDAEMONS=`reverse $ZENDAEMONS`
                FUNC=stop
                issue
                ZENDAEMONS=`set_deamon_list`
                FUNC=start
                issue
                return $?
            fi

        fi

    done
    return $HIGHESTCODE
}

xissue() {
    # To properly conform to LSB standards and be used under Linux-HA or RHCS
    # we need to exit with a proper non-zero code when there is a problem with
    # the service. We'll take the naive approach of responding with the highest
    # and most likely worse condition of any of the configured daemons.
    HIGHESTCODE=0

    XFUNC=$FUNC
    if [ $FUNC == "xstatus" ]; then
        XFUNC="status"
    fi
    echo "Status        | PID     | Daemon "
    echo "-------------------------------------------------------------------"
    for cmd in $ZENDAEMONS
    do
        # Special status handling for zeoctl and zopectl because the stock
        # scripts exit with a code of 0 no matter what state they're in.
        if [ $XFUNC == "xstatus" -a \( $cmd == "zeoctl" -o $cmd == "zopectl" \) ]
        then
            PIDFILE="${ZENHOME}/var/Z2.pid"
            [ $cmd == 'zeoctl' ] && PIDFILE="${ZENHOME}/var/ZEO.pid"

            if running; then
                printf "Running     %8d    $cmd\n"  $PID
                CODE=0
            else
                echo "Stopped             $cmd"
                if [ -f $PIDFILE ]; then
                    rm -f $PIDFILE
                    CODE=1
                else
                    CODE=3
                fi
            fi
        else
            CMD_OUTPUT=`$ZENHOME/bin/$cmd $XFUNC`
            CODE=$?
            CMD_PID=`echo "${CMD_OUTPUT}" | grep pid | awk -F\= '{ print $2 }'`
            if [ $CMD_PID ]
            then
                printf "Running     %8d      $cmd\n"  $CMD_PID
            else
                echo "Stopped                   $cmd"
            fi
        fi
        if [ $CODE -gt $HIGHESTCODE ]; then
            HIGHESTCODE=$CODE
        fi
    done
    return $HIGHESTCODE
}

reverse() {
    args=
    for i
    do
       args="$i $args"
       shift
    done
    echo $args
}

# Main()

# Attempt to set ZENHOME if it is not already set, or bogus
# by calculating it relative to the executing command
if [ -z "$ZENHOME" -o ! -d "$ZENHOME" ] ; then
    # Resolve links: $0 may be a link to zenoss's home.
    PRG="$0"
    while [ -h "$PRG" ] ; do
        ls=`ls -ld "$PRG"`
        link=`expr "$ls" : '.*-> \(.*\)$'`
        if expr "$link" : '/.*' > /dev/null; then
            PRG="$link"
        else
            PRG=`dirname "$PRG"`"/$link"
        fi
    done
    SAVED="`pwd`"
    cd "`dirname \"$PRG\"`/.."
    ZENHOME="`pwd -P`"
    export ZENHOME
    cd "$SAVED"
fi

if [ `id -u` -eq 0 ] ; then
   USERNAME=`ls -l $ZENHOME/bin/zenoss | awk '{ print $3 }'`
   if [ "$USERNAME" = "root" -o -z "$USERNAME" ]  ; then
       echo Unable to determine the right user to run zenoss
       exit 1
   fi
   chown -R $USERNAME $ZENHOME/var
   chown -R $USERNAME $ZENHOME/log
   exec su - $USERNAME $0 $@
fi

DAEMON_FILTER="*"
ONLY_RUNNING=0
while getopts "f:r" opt; do
    case $opt in
        f)
            # apply action to daemons matched by filter
            DAEMON_FILTER="$OPTARG"
            ;;
        r)
            # apply action to only running daemons
            ONLY_RUNNING=1
            ;;
        \?)
            echo "Invalid option -$OPTARG" >&2
            exit 1
            ;;
   esac
   shift `expr $OPTIND - 1`
done

. $ZENHOME/bin/zenfunctions


ZENDAEMONS=`set_deamon_list`
# $CMD is defined in zenfunctions, start stop etc
FUNC=$CMD

EXITCODE=4

case "$FUNC" in
  start)
        issue
        EXITCODE=$?
        ;;
  stop)
        ZENDAEMONS=`reverse $ZENDAEMONS`
        issue
        EXITCODE=$?
    rm -f $ZENHOME/var/.*watchdog-*
        ;;
  restart)
        ZENDAEMONS=`reverse $ZENDAEMONS`
    FUNC=stop
    issue
        ZENDAEMONS=`reverse $ZENDAEMONS`
    FUNC=start
        issue
        EXITCODE=$?
        ;;
  status)
        issue
        EXITCODE=$?
        ;;
  xstatus)
    xissue
    EXITCODE=$?
    ;;
  list)
    for i in $ZENDAEMONS
    do
        echo $i
        EXITCODE=0
    done
    ;;
  *)
        echo $"Usage: $0 {start|stop|restart|status|xstatus|list}"
        exit 1
esac
exit $EXITCODE
